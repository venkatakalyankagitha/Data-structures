#include<stdio.h>
#include<stdlib.h>

struct polynomial
{
        int coeff,exp;
        struct polynomial *next;
};
typedef struct polynomial node;
node*addterm(node*first,node*new);
node *create()
{
        node*first=NULL,*new;
        char c;
        do
        {
                new=(node*)malloc(sizeof(node));
                new->next=NULL;
                printf("enter coefficient and exponent of terms");
                scanf("%d%d",&new->coeff,&new->exp);
                first=addterm(first,new);
                printf("enter another character(enter n to stop)");
                scanf(" %c",&c);
        }while(c!='n');
        return first;
}
node*addterm(node*first,node*new)
{
        node *temp,*temp1;
        if(first==NULL)
        {
                first=new;
                temp=new;
        }
        else if(first->exp<new->exp)
        {
                new->next=first;
                first=new;
        }
        else if(first->exp==new->exp)
        {
                first->coeff=first->coeff+new->coeff;
        }
        else
        {
                temp=first->next;
                temp1=first;
                while((temp!=NULL)&&(temp->exp>new->exp))
                {
                        temp1=temp;
                        temp=temp->next;
                }
                if(temp==NULL)
                {
                        temp1->next=new;
                }
                else if(temp->exp==new->exp)
                {
                        temp->coeff=temp->coeff+new->coeff;
                }
                else
                {
                        temp1->next=new;
                        new->next=temp;
                }
        }
        return first;
}
node*add(node*p1,node*p2)
{
        node*p3=NULL,*new;
        while(p1!=NULL&&p2!=NULL)
        {
                new=(node*)malloc(sizeof(node));
                new->next=NULL;
                if(p1->exp>p2->exp)
                {
                        new->coeff=p1->coeff;
                        new->exp=p1->exp;
                        p3=addterm(p3,new);
                        p1=p1->next;
                }
                else if(p2->exp>p1->exp)
                {
                        new->coeff=p2->coeff;
                        new->exp=p2->exp;
                        p3=addterm(p3,new);
                        p2=p2->next;
                }
                else
                {
                        new->coeff=p1->coeff+p2->coeff;
                        new->exp=p1->exp;
                        p3=addterm(p3,new);
                        p1=p1->next;
                        p2=p2->next;
                }
        }
        if(p1==NULL)
        {
                while(p2!=NULL)
                {
                        new=(node*)malloc(sizeof(node));
                        new->exp=p2->exp;
                        new->coeff=p2->coeff;
                        p3=addterm(p3,new);
                        p2=p2->next;
                }
        }
        if(p2==NULL)
        {
                while(p1!=NULL)
                {
                        new=(node*)malloc(sizeof(node));
                        new->exp=p1->exp;
                        new->coeff=p1->coeff;
                        p3=addterm(p3,new);
                        p1=p1->next;
                }
        }
        return p3;
}
node*mul(node*p1,node*p2)
{
        node*new,*temp=p2,*p3=NULL;
        while(p1!=NULL)
        {
                p2=temp;
                while(p2!=NULL)
                {
                        new=(node*)malloc(sizeof(node));
                        new->exp=p1->exp + p2->exp;
                        new->coeff=(p1->coeff)*(p2->coeff);
                        p3=addterm(p3,new);
                        p2=p2->next;
                }
                p1=p1->next;
        }
        return p3;
}
void display(node*p3)
{
        while(p3!=NULL)
        {
                printf("|%dX^%d|->",p3->coeff,p3->exp);
                p3=p3->next;
        }
