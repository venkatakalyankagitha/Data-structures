#include<stdio.h>
#include<stdlib.h>

struct clist
{
    int data;
    struct clist *next;
};

typedef struct clist node;

node *create(node *first)
{
    node *new,*prev;
    int x;
    printf("Enter the data value(Enter -1 to stop)=");
    scanf("%d",&x);
   
    while(x!=-1)
    {
        new=(node*)malloc(sizeof(node));
        new->data=x;
        new->next=NULL;
        if(first==NULL)
        {
            first=new;
        }
        else
        {
            prev->next=new;
        }
        prev=new;
        printf("Enter the data value(Enter -1 to stop)=");
        scanf("%d",&x);
    }
    prev->next=first;
    return first;
}

node *display(node *first)
{
    node *temp;
    if(first==NULL)
    {
        printf("No list elements to display");
    }
    else
    {
        temp=first;
        do
        {
            printf("|%d|->",temp->data);
            temp=temp->next;
        }
        while(temp!=first);
        printf("|%d|",temp->data);
    }
}

int count(node *first)
{
    node *temp=first;
    int c=0;
    if(first==NULL)
    {
        return c;
    }
    else
    {
        do
        {
            c++;
            temp=temp->next;
        }
        while(temp!=first);
        return c;
    }
}

void search(node *first,int x)
{
    node *temp=first;
    int flag=0;
    do
    {
        if(temp->data==x)
        {
            flag=1;
            break;
        }
        else
        {
            temp=temp->next;
        }
    }while(temp!=first);
   
    if(flag==1)
    {
        printf("The given element %d is found",x);
    }
    else
    {
        printf("The given element %d is not found",x);
    }
}

node *insertatbegin(node *first,int x)
{
    node *new=(node*)malloc(sizeof(node)),*temp;
    new->data=x;
    new->next=NULL;
    if(first==NULL)
    {
        first=new;
        new->next=first;
    }
    else
    {
        temp=first;
        do
        {
            temp=temp->next;
        }while(temp->next!=first);
        new->next=first;
        first=new;
        temp->next=first;
    }
    return first;
}

node *insertatend(node *first,int x)
{
    node *new=(node*)malloc(sizeof(node)),*temp;
    new->data=x;
    new->next=NULL;
    if(first==NULL)
    {
        first=new;
        new->next=first;
    }
    else
    {
        temp=first;
        do
        {
            temp=temp->next;
        }while(temp->next!=first);
        temp->next=new;
        new->next=first;
    }
    return first;
}

node *insertatpos(node *first,int x,int p)
{
    node *new,*temp=first;
    int n=count(first);
    if(p>1 && p<n)
    {
        new=(node*)malloc(sizeof(node));
        new->data=x;
        new->next=NULL;
        int i=1;
        do
        {
            temp=temp->next;
            i++;
        }while(i<p-1);
        new->next=temp->next;
        temp->next=new;
    }
    return first;
}

node *delete(node *first,int x)
{
    node *temp,*temp1;
    int flag=0;
    if(first->data==x)
    {
        temp=first;
        do
        {
            temp=temp->next;
        }while(temp->next!=first);
        temp->next=first->next;
        first=first->next;
    }
    else
    {
        temp=first;
        temp1=first->next;
        do
        {
            if(temp1->data==x)
            {
                flag=1;
                break;
            }
            else
            {
                temp=temp1;
                temp1=temp1->next;
            }
        }while(temp1!=first);
        if(flag==1)
        {
            temp->next=temp1->next;
        }
        else
        {
            printf("The element %d is not found",x);
        }
    }
    return first;
}

node *sort(node *first)
{
    node *temp1,*temp2;
    int x;
    for(temp1=first;temp1->next!=first;temp1=temp1->next)
    {
        for(temp2=temp1->next;temp2!=first;temp2=temp2->next)
        {
            if(temp1->data>temp2->data)
            {
                x=temp1->data;
                temp1->data=temp2->data;
                temp2->data=x;
            }
        }
    }
    return first;
}

node *reverse(node *first)
{
    node *present=first,*prev=NULL,*save;
    do
    {
       
    }while(present->next!=first);
    return prev;
}

int main()
{
    node *head=NULL;
    head=create(head);
    display(head);
   
    int ch,n,p,x;
    printf("\n1\tcount\n2\tsearch\n3\tinsert an element at beginning\n4\tinsert an element at ending\n5\tinsert an element at given position\n6\tdelete an element\n7\tsort\n8\treverising\n9\texit\n");
    printf("Enter your choice=");
    scanf("%d",&ch);
   
    switch(ch)
    {
        case 1:
        n=count(head);
        printf("No:of nodes in the given circular linked list are=%d",n);
        break;
       
        case 2:
        printf("Enter the element to be searched=");
        scanf("%d",&x);
        search(head,x);
        break;
       
        case 3:
        printf("Enter the element you want to insert at beginnig=");
        scanf("%d",&x);
        head=insertatbegin(head,x);
        display(head);
        break;
       
        case 4:
        printf("Enter the element you want to insert at ending=");
        scanf("%d",&x);
        head=insertatend(head,x);
        display(head);
        break;
       
        case 5:
        printf("Enter the element and position where you want to insert=");
        scanf("%d%d",&x,&p);
        head=insertatpos(head,x,p);
        display(head);
        break;
       
        case 6:
        printf("Enter the element you want to delete=");
        scanf("%d",&x);
        head=delete(head,x);
        display(head);
        break;
       
        case 7:
        head=sort(head);
        display(head);
        break;
       
        case 8:
        head=reverse(head);
        display(head);
        break;
       
        case 9:
        exit(0);
        break;
       
        default:
        printf("Enter correct choice");
    }
}






